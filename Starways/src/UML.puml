/'
----------------------------------------READ THIS----------------------------------------

To view this file as a UML diagram in Google Chrome you need to have the PlantUML Viewer extension installed.
You can then open this file as a diagram on GitHub by using the raw button at the top of the file viewer. 
You can get the Chrome extension here: 
https://chrome.google.com/webstore/detail/plantuml-viewer/legbfeljfbjgfifnkmpoajgpgejojooj

To view this file as a UML diagram in NetBeans you need to have the PlantUML pluging installed. 
You can get the NetBeans plugin it here: http://plugins.netbeans.org/plugin/49069/plantuml

-----------------------------------------------------------------------------------------
'/
@startuml
namespace com.github.ryancwilliams.Starways
    namespace engine {
        namespace bodies {    
            class AstronomicalObject {
                -radius : ValueOfLength
                -mass : ValueOfMass
                +getRadius() : ValueOfLength
                +getMass() : ValueOfMass
            }
        }
        namespace positions {
            abstract class Position {
                {abstract}+getX() : double
                {abstract}+getY() : double
            }
            Position <|-- FinitePosition
            Position <|-- RelativePosition
            class FinitePosition {
                -x : double
                -y : double
                +FinitePosition(double x, double y)
                +getX() : double
                +getY() : double
                +setX(double x)
                +setY(double y)
            }
            class RelativePosition {
                #referencePosition : Position
                -dx : double
                -dy : double
                +RelativePosition(Position referencePosition, double dy, double dx)
                +RelativePosition(Position referencePosition)
                +getX() : double
                +getY() : double
                +getReferencePosition() : Position
                +setReferencePosition(Position referencePosition)
                +changeReferencePosition(Position referencePosition)
                +getDX() : double
                +getDY() : double
                +setDX(double dx)
                +setDy(double dx)
                +setRelativePosition(double dx, double dy)
            }
            RelativePosition <|-- OrbitPosition
            class OrbitPosition {
                -referencePositionMass : ValueOfMass
                -orbitingMass : ValueOfMass
                -distance : ValueOfLength
                -angle : double
                +OrbitPosition(Position referencePosition, ValueOfMass referencePositionMass, ValueOfMass orbitingMass, ValueOfLength Distance, double angle)
                +OrbitPosition(Position referencePosition, ValueOfMass referencePositionMass, ValueOfMass orbitingMass, ValueOfLength Distance)
                +OrbitPosition(AstronomicalObject primaryBody, ValueOfMass orbitingMass, ValueOfLength Distance, double angle)
                +OrbitPosition(AstronomicalObject primaryBody, ValueOfMass orbitingMass, ValueOfLength Distance)
                +getReferencePositionMass() : ValueOfMass
                +getOrbitingMass() : ValueOfMass
                +getDistance() : ValueOfLength
                +setDistance(ValueOfLength distance)
                +getAngle() : double
                +setAngle(double angle)
                +incrementTime(ValueOfTime time)
            }
        }
        namespace math.ValuesOfQuantites {
            interface Quantity {
                +getName()
                +getSymbol()
                +getConversionFactor()
            }
            Quantity <|.. QuantityOfLength
            Quantity <|.. QuantityOfMass
            Quantity <.up. ValueOfQuantity
            enum QuantityOfLength {
                METRE
                KILOMETRE
                ASTRONOMICAL_UNIT
                LIGHT_YEAR
                SOLAR_RADIUS
                EARTH_RADIUS
                +{static} BASE_UNIT : QuantityOfLength
                -NAME : String
                -SYMBOL : String
                -CONVERSION_FACTOR : double
                -QuantityOfLength(String Name, String Symbol, double ConversionFactor)
                +getName() : String
                +getSymbol() : String
                +getConversionFactor() : double
                +{static} caculateConversionFactor(QuantityOfLength source, QuantityOfLength destination) : double
                +toString() : String
            }
            QuantityOfLength --o ValueOfLength
            enum QuantityOfMass {
                KILOGRAM
                GRAM
                METRIC_TON
                SOLAR_MASS
                EARTH_MASS
                +{static} BASE_UNIT : QuantityOfMass
                -NAME : String
                -SYMBOL : String
                -CONVERSION_FACTOR : double
                -QuantityOfLength(String Name, String Symbol, double ConversionFactor)
                +getName() : String
                +getSymbol() : String
                +getConversionFactor() : double
                +{static} caculateConversionFactor(QuantityOfLength source, QuantityOfLength destination) : double
                +toString() : String
            }
            QuantityOfMass --o ValueOfMass
            abstract class ValueOfQuantity {
                #value : double
                +getValue() : double
                +setValue(double value)
                +getQuantity() : Quantity
                +asString(int precision) : String
                +asString()
            }
            ValueOfQuantity <|-- ValueOfLength
            ValueOfQuantity <|-- ValueOfMass
            ValueOfQuantity <..> ValueOfQuantityFormatter
            class ValueOfMass {
                -quantity : QuantityOfMass
                +ValueOfMass(double value, QuantityOfMass quantity)
                +getQuantity() : QuantityOfMass
                +setQuantity(QuantityOfMass quantity)
                +getConvertedValue(QuantityOfMass quantity) : double
                +getConvertedValueOfLength(QuantityOfMass quantity) : ValueOfMass
                +convertTo(QuantityOfMass quantity)
                +asString() : String
                +toString() : String
            }
            ValueOfMass --* bodies.AstronomicalObject
            class ValueOfLength {
                -quantity : QuantityOfLength
                +ValueOfLength(double value, QuantityOfLength quantity)
                +getQuantity() : QuantityOfLength
                +setQuantity(QuantityOfLength quantity)
                +getConvertedValue(QuantityOfLength quantity) : double
                +getConvertedValueOfLength(QuantityOfLength quantity) : ValueOfLength
                +convertTo(QuantityOfLength quantity)
                +asString() : String
                +toString() : String
            }
            ValueOfLength --* bodies.AstronomicalObject
            class ValueOfQuantityFormatter {
                -getFormat(int decimalPlaces) : DecimalFormat
                ~formatValueOfQuantity(ValueOfQuantity value, int decimalPlaces) : String
            }
        }
    }
}
@enduml
